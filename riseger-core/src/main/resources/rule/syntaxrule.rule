sql -> ues_sql
    | create_sql
    | search_sql

create_sql -> "PRELOAD" string_entity :> org.riseger.protocol.compiler.function.preload.Preload_f

ues_sql -> "USE" use_clause
    | "USE" use_clause search_sql
    | "USE" use_clause update_sql
//TODO:    | "USE" use_clause alter_sql
//TODO:    | "USE" use_clause delete_sql

search_sql ->  "SEARCH" search_clause "WHERE" where_clause
    | "SEARCH" search_clause
    | "GET" "DATABASES" :> org.riseger.protocol.compiler.function.get.GetDatabases_f
    | "GET" "MAPS" :> org.riseger.protocol.compiler.function.get.GetMaps_f
    | "GET" "MODELS" :> org.riseger.protocol.compiler.function.get.GetModels_f


//TODO:"DELETE" "DATABASE" string_entity :>

use_clause -> use_statement "|" use_clause
    | use_statement

use_statement -> "DATABASE" string :> org.riseger.protocol.compiler.function.main.UseDatabase_f
    | "MAP" string :> org.riseger.protocol.compiler.function.main.UseMap_f
    | "SCOPE" rectangle_expression :> org.riseger.protocol.compiler.function.main.UseScope_f
    | "MODEL" strings_expression :> org.riseger.protocol.compiler.function.main.UseModel_f


search_clause -> strings_expression :> org.riseger.protocol.compiler.function.main.Search_f

update_sql -> "UPDATE" update_clause "WHERE" where_clause

updates_clause -> update_clause "," updates_clause
    | update_clause

update_clause -> attribute_expression "=" all_entity :> org.riseger.protocol.compiler.function.main.Update_f

where_clause -> bool_condition :> org.riseger.protocol.compiler.function.main.Where_f

bool_condition -> "(" bool_condition ")"
    | bool_condition_0 "OR" bool_condition_0 :> org.riseger.protocol.compiler.function.logic.Or_f
    | bool_condition_0

bool_condition_0 -> bool_condition_1 "AND" bool_condition_1 :> org.riseger.protocol.compiler.function.logic.And_f
    | bool_condition_1

bool_condition_1 -> "!" bool_condition_2 :> org.riseger.protocol.compiler.function.logic.Not_f
    | bool_condition_2

bool_condition_2 -> "IN" graphic_expression :> org.riseger.protocol.compiler.function.graphic.In_f
    | "OUT" graphic_expression :> org.riseger.protocol.compiler.function.graphic.Out_f
    | bool_condition_3

bool_condition_3 -> num_condition ">" bool_condition_3 :> org.riseger.protocol.compiler.function.math.Big_f
    | num_condition ">=" bool_condition_3 :> org.riseger.protocol.compiler.function.math.BigEqual_f
    | num_condition "<" bool_condition_3 :> org.riseger.protocol.compiler.function.math.Small_f
    | num_condition "<=" bool_condition_3 :> org.riseger.protocol.compiler.function.math.SmallEqual_f
    | num_condition "=" bool_condition_3 :> org.riseger.protocol.compiler.function.math.Equal_f
    | num_condition

num_condition -> "(" num_condition ")"
    | "-" num_condition :> org.riseger.protocol.compiler.function.number.NegivateNumber_f
    | num_condition_0

num_condition_0
    | num_condition_1 "+" num_condition :> org.riseger.protocol.compiler.function.number.AddNumber_f
    | num_condition_1 "-" num_condition :> org.riseger.protocol.compiler.function.number.SubNumber_f
    | num_condition_1

num_condition_1 -> number_entity "*" num_condition :> org.riseger.protocol.compiler.function.number.MutiNumber_f
    | number_entity "/" num_condition :> org.riseger.protocol.compiler.function.number.DivideNumber_f
//    | graphic_expression ":" number_entity ":" string :> //TODO:从长方体提取点数值,冒号语法
//    | coord_expression ":" string :> //TODO:从坐标提取数值,冒号语法
    | number_entity

graphic_expression -> rectangle_expression
    | coords_expression
    | coord_expression :> org.riseger.protocol.compiler.function.entity.CoordToRect_f
    | attribute_expression

coords_expression -> coord_expression "," coords_expression :> org.riseger.protocol.compiler.function.entity.Coords_f
    | coord_expression :> org.riseger.protocol.compiler.function.entity.TopCoords_f

rectangle_expression -> "RECT" "(" coord_expression "," num_condition ")" :> org.riseger.protocol.compiler.function.entity.Rectangle_f

coord_expression -> "[" num_condition "," num_condition "]" :> org.riseger.protocol.compiler.function.entity.Coord_f
//    | rectangle_expression ":" number_entity :> //TODO:从长方体提取点坐标,冒号语法

strings_expression -> dot_strings_expression "," strings_expression :> org.riseger.protocol.compiler.function.entity.Strings_f
    | dot_strings_expression :> org.riseger.protocol.compiler.function.entity.TopStrings_f

all_entity -> num_condition
    | rectangle_expression
    | coord_expression
    | attribute_expression
    | string_entity

//TODO:连锁要更改dot的查询逻辑
//dot_strings_expression -> dot_string "AS" string :> //TODO: org.riseger.protocol.compiler.function.As_f
//    | dot_string

dot_strings_expression -> dot_strings

number_entity -> number
    | attribute_expression

attribute_expression -> dot_strings :> org.riseger.protocol.compiler.function.entity.Attribute_f

dot_strings -> string "." dot_strings :> org.riseger.protocol.compiler.function.entity.DotStrings_f
    | string :> org.riseger.protocol.compiler.function.entity.TopDotStrings_f

string_entity -> "'" string "'"

END:number :> org.riseger.protocol.compiler.function.Entity_f
END:string :> org.riseger.protocol.compiler.function.Entity_f

//bool_condition 是顶层的布尔表达式。
//or_condition 处理逻辑 OR 运算。
//and_condition 处理逻辑 AND 运算。
//not_condition 处理逻辑 NOT 运算。
//comparison 处理比较运算符（例如，大于、小于、等于）。
//additive 处理加法运算。
//multiplicative 处理乘法运算。
//unary 处理一元运算（例如，逻辑 NOT 运算）。
//primary 处理最基本的表达式，包括数字、属性、以及括号内的布尔表达式。